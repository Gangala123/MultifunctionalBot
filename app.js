
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const request = require('request');
//var bot = new TelegramBot(token,{polling:true});
//var request = require('request');

// Telegram's —Ç–æ–∫–µ–Ω
const token = '987122839:AAFn3Dq-GeCzmBUxhQLcIkNzMKuNicu7h4Y';

//OpenWeatherMap API –∫–ª—é—á
const appID = '34f820f33bf9cb9fcccdc51b8be99015';

// –ö—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞ OpenWeatherMap –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞
const weatherEndpoint = (city) => (
  `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&&appid=${appID}`
);

//URL-–∞–¥—Ä–µ—Å–∞, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –ø—ñ–∫—Ç–æ–≥—Ä–∞–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ–≥–æ–¥–∏
const weatherIcon = (icon) => `http://openweathermap.org/img/w/${icon}.png`;

// –®–∞–±–ª–æ–Ω —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ–≥–æ–¥—É
const weatherHtmlTemplate = (name, main, weather, wind, clouds) => (
  `–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤ <b>${name}</b>:
<b>${weather.main}</b> - ${weather.description}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${main.temp} ¬∞C</b>
–¢–∏—Å–∫: <b>${main.pressure} hPa</b>
–í–æ–ª–æ–≥—ñ—Å—Ç—å: <b>${main.humidity} %</b>
–í—ñ—Ç–µ—Ä: <b>${wind.speed} meter/sec</b>
–•–º–∞—Ä–∏: <b>${clouds.all} %</b>
`
);

// –°—Ç–≤–æ—Ä–µ–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä TelegramBot
const bot = new TelegramBot(token, {
  polling: true
});

//–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥—É –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞
const getWeather = (chatId, city) => {
  const endpoint = weatherEndpoint(city);

  axios.get(endpoint).then((resp) => {
    const {
      name,
      main,
      weather,
      wind,
      clouds
    } = resp.data;

    bot.sendPhoto(chatId, weatherIcon(weather[0].icon))
    bot.sendMessage(
      chatId,
      weatherHtmlTemplate(name, main, weather[0], wind, clouds), {
        parse_mode: "HTML"
      }
    );
  }, error => {
    console.log("error", error);
    bot.sendMessage(
      chatId,
      `–û—É–ø—Å ... —è –Ω–µ –º—ñ–≥ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É <b>${city}</b>`, {
        parse_mode: "HTML"
      }
    );
  });
}

// Listener (handler) for telegram's /weather event
bot.onText(/\/weather/, (msg, match) => {
  const chatId = msg.chat.id;
  const city = match.input.split(' ')[1];

  if (city === undefined) {
    bot.sendMessage(
      chatId,
      `–£–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞"/weather –º—ñ—Å—Ç–æ "`
    );
    return;
  }
  getWeather(chatId, city);
});

// –°–ª—É—Ö–∞—á (–æ–±—Ä–æ–±–Ω–∏–∫) –¥–ª—è –ø–æ–¥—ñ—ó —Ç–µ–ª–µ–≥—Ä–∞–º–∏ / –∑–∞–ø—É—Å–∫—É
// –¶—è –ø–æ–¥—ñ—è —Å—Ç–∞–ª–∞—Å—è, –∫–æ–ª–∏ –≤–∏ –ø–æ—á–∏–Ω–∞—î—Ç–µ —Ä–æ–∑–º–æ–≤—É –∑ –æ–±–æ–º–∞ –≤–ø–µ—Ä—à–µ
// –ù–∞–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞ <b> MultifunctionalBot </b>, –¥—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ—î—ó –ø–æ—Å–ª—É–≥–∏
    
    –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/movie <b> —Ñ—ñ–ª—å–º </b> - –ø–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–∏–π –≤–∞–º–∏ —Ñ—ñ–ª—å–º
/weather <b> –º—ñ—Å—Ç–æ </b> - –ø–æ–∫–∞–∑—É—î –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ <b> –º—ñ—Å—Ç–∞ </b>
/curse - –ø–æ–∫–∞–∑—É—î <b> –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏ </b>  —è–∫–∏–π –≤–∏ –≤–∏–±–µ—Ä–µ—Ç–µ 
  `, {
      parse_mode: "HTML"
    }
  );
});
bot.onText(/\/curse/, (msg, match) => {

  const chatId = msg.chat.id;

  bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '‚Ç¨ - EUR',
            callback_data: 'EUR'
          }, {
            text: '$ - USD',
            callback_data: 'USD'
          }, {
            text: '‚ÇΩ - RUR',
            callback_data: 'RUR'
          }, {
            text: '‚Çø - BTC',
            callback_data: 'BTC'
          }
        ]
      ]
    }
  });
});

bot.on('callback_query', query => {
  const id = query.message.chat.id;

  request('https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5', function (error, response, body) {
    const data = JSON.parse(body);
    const result = data.filter(item => item.ccy === query.data)[0];
    const flag = {
      'EUR': 'üá™üá∫',
      'USD': 'üá∫üá∏',
      'RUR': 'üá∑üá∫',
      'UAH': 'üá∫üá¶',
      'BTC': '‚Çø'
    }
    let md = `
      *${flag[result.ccy]} ${result.ccy} üí± ${result.base_ccy} ${flag[result.base_ccy]}*
      –ö—É–ø—ñ–≤–ª—è: _${result.buy}_
      –ü—Ä–æ–¥–∞–∂–∞: _${result.sale}_
    `;
    bot.sendMessage(id, md, {parse_mode: 'Markdown'});
  })
})


bot.onText(/\/movie (.+)/,function(msg,match){
  var movie = match[1];
  var chatId = msg.chat.id;
  request(`http://www.omdbapi.com/?apikey=33dcec48&t=${movie} `,function(error,response, body){
if (!error && response.statusCode == 200){
var res =JSON.parse(body);
 //bot.sendPhoto(chatId, res.Poster,{caption: '–†–µ–∑—É–ª—å—Ç–∞—Ç:' + res.Title })
  bot.sendPhoto(chatId,  res.Poster,{ caption:'–†–µ–∑—É–ª—å—Ç–∞—Ç: \n–ù–∞–∑–≤–∞: '+ res.Title + '\n–†—ñ–∫: ' + res.Year+ '\n–û—Ü—ñ–Ω–µ–Ω–∏–π: ' + res.Rated + '\n–í–∏–ø—É—â–µ–Ω–æ: '+ res.Released + '\n–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: '+ res.Runtime +'\n–ñ–∞–Ω—Ä: '+ res.Genre })

}
  });
})

